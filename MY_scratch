;;; -*- mode: lisp-interaction; -*-
;; M-x add-file-local-variable-prop-line
;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

;; lisp-interaction-mode
;; Command: Major mode for typing and evaluating Lisp forms.
;; Like Lisp mode except that M-x eval-print-last-sexp evals the Lisp
;; expression



org-insert-mode-line-in-empty-file

#+TAGS: { WANTED(m) 1BY1(s) } Habitica(h)

(setq org-tag-alist '((:startgroup . nil)
		      (:startgrouptag)
		      ("WANTED" . ?m)
		      ("LUFFY" . ?l)
		      (:endgrouptag)
		      ("soso" . ?s) ("Rerun" . ?r)
		      (:endgroup . nil)
		      ("Habitica". ?h)
		      ("Caution" . ?y)
		      ))

(setq org-tag-persistent-alist '((:startgroup . nil)
		      ("WANTED" . ?m)
		      ("Rerun" . ?r)
		      (:endgroup . nil)
		      ))


(setq org-tag-alist nil)


(setq org-tag-persistent-alist nil)

()

org-plain-list-ordered-item-terminator
(setq org-plain-list-ordered-item-terminator t)?)
#wrong (add-to-list  '(‘-’ (\, ‘+’) (\, ‘*’) (\, ‘1\.’) (\, ‘1)) 'org-plain-list-ordered-item-terminator)

org-list-demote-modify-bullet

(desktop-save-mode 1)

(setq desktop-restore-eager 5)
desktop-restore-eager


(setq desktop-path '("~" "~/.emacs.d/"))

desktop-auto-save-timeout

org-use-property-inheritance

(setq org-use-property-inheritance nil)
(setq org-use-tag-inheritance nil)

org-effort-durations

org-table-auto-blank-field

global-mark-ring-max

(identity (list "a" "a" "b" "c"))

(list "a" "b" "c")

(setq set-1  'identity (list (a b c d)))
(setq set0 (intersection 'identity (list a, b, c) (list a, b, d)))


(setq set1 (intersection '(a b c) '(c d a)))
(setq set2 (intersection '(#(a b) #(5 6 7) #e(f h))
			 '(#(5 6 7) #(a b) #(g h)) :test-not #'mismatch))

(setq set3 (intersection '(#(a b) #(5 6 7) #(f h))
			 '(#(5 6 7) #(a b) #(g h))))
(write set1)
(terpri)
(write set2)
(terpri)
(write set3)


(or (member value var)
    (setq var (cons value var)))


(setq hl-paren-colors '("azure" "green" "yellow" "violetred" "orange"))



hl-paren-colors

"azure"
"green"
load-path

/home/ben/.emacs.d/elpa/highlight-parentheses-1.1.0/
/home/ben/.emacs.d/elpa/highlight-parentheses-1.1.0

S--!!!
(setq mylist (list "a" "1" "3" ))

(setq myele (list "a" "b" "c"))

((lambda(e)(if (member e myele) e)) (car myele))

(delete-if (lambda(e) (if (member e myele) e)) mylist)
(delete-if (lambda(e) nil) mylist)
(delete-if (lambda(e) 0) mylist)
E--!!!
S--???
(setq interlis (intersection myele mylist))
(intersection mylist myele)
DIY delete-if ===

E--???


delete-if

:ELT ==> element


(delete "a" mylist)

(delete 'c '(a a b c))

(setq mylist '(a b c d a))
mylist
(member 'd mylist)

(car mylist)

((lambda(e) (member e mylist)) 'd)

((lambda(num)(* 7 num)) 3)

(setq buffer-undo-list t)

org-agenda-files



org-deadline-warning-days

org-agenda-skip-scheduled-if-done

(setq org-agenda-files (list "~/filofex/afflux_fromAliECS.org" "/home/ben/filofex/tord.org"))
(setq timeclock-modeline-display t)

(setq calendar-latitude 31.22)
(setq calendar-longitude 121.48)
(setq calendar-location-name "Shanghai, sh")

(put 'upcase-region 'disabled t)
(put 'downcase-region 'disabled t)

(timeclock-when-to-leave 12)
TODAY-ONLY

REPEAT_TO_STATE
(setq org-todo-repeat-to-state "ReTodo")
(setq org-log-done 'time)
(setq org-log-repeat 'note)

((()))

(setq org-timer-default-timer "25")

(setq org-deadline-warning-days 14)


;; D-pre no warning when S
(setq org-deadline-warning-days 0)

org-agenda-skip-deadline-prewarning-if-scheduled


;; S-delay no warning when D
org-agenda-skip-scheduled-delay-if-deadline

org-scheduled-delay-days

org-display-custom-times

;; customer's timestamps
(setcdr org-time-stamp-custom-formats (cdr org-time-stamp-custom-formats))
("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>")
("<%d/%m/%y %a>" . "<%d/%m/%y %a %H:%M>")
(add-to-list 'org-time-stamp-custom-formats '("<%d/%m/%y %a>" . "<%d/%m/%y %a %H:%M>"))
(setq org-time-stamp-custom-formats '("<%d/%m/%y %a>" . "<%d/%m/%y %a %H:%M>"))
(setq org-time-stamp-custom-formats '("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))
org-time-stamp-custom-formats

(setq org-clock-persist 'history)
org-clock-persistence-insinuate


;; no schedule repeat after deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline)


...
(setq org-log-done nil)

org-agenda-skip-scheduled-if-done

(org-xor t nil)
(org-xor (= 1 2) (= 1 1))

...
customize options: org-id-link-to-org-use-id
org-directory
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
(setq org-default-notes-file (concat org-directory "/torch.org"))

...
(setq mark-holidays-in-calendar t)
org-capture-bookmark

(setq org-capture-templates
      '(("g" "for convinient goto")
	("gt" "Todo" entry (file+headline "~/filofex/torch.org" "Tasks")
	 "* TODO %?\n  %U\n  %i\n  %a" :empty-lines 1)
	("gj" "Journal" entry (file+olp+datetree "~/filofex/tarrow.org")
	         "* %?\nEntered on %U\n  %i\n  %a" :empty-lines 1)))
org-capture-templates
(define-key global-map "\C-cx"
     (lambda () (interactive) (org-capture nil "gj")))

...
;; xattr-ns-grep-codeBlock in orgs
org-babel-load-languages

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . nil)
   (R . t)
   (python . t)
   (shell . t)))
